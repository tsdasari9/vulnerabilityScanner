package main

import (
	"fmt"
	"os"
	"sync"
)

func main() {
	if len(os.Args) < 3 {
		fmt.Println("Usage: go run main.go <start-ip> <end-ip>")
		return
	}

	startIP := os.Args[1]
	endIP := os.Args[2]
	ports := []int{21, 22, 80, 443}

	// 1. Network Scanning
	activeHosts := scanNetwork(startIP, endIP)

	// 2. Load Vulnerability Database
	vulnerabilities, err := loadVulnerabilityDatabase("vuln_db.json")
	if err != nil {
		fmt.Printf("Error loading vulnerability database: %v\n", err)
		return
	}

	// 3. Concurrent Port Scanning and Service Detection
	var wg sync.WaitGroup
	for _, host := range activeHosts {
		for _, port := range ports {
			wg.Add(1)
			go func(host string, port int) {
				defer wg.Done()
				open := scanPort(host, port)
				if open {
					service := detectService(host, port)
					fmt.Printf("Service detected on %s:%d: %s\n", host, port, service)

					// 4. Vulnerability Matching
					detectedVulns := matchVulnerabilities(service, vulnerabilities)
					if len(detectedVulns) > 0 {
						fmt.Printf("Vulnerabilities found on %s:%d: %v\n", host, port, detectedVulns)
					}

					// 5. Reporting
					report := ScanReport{
						Host:            host,
						Ports:           []int{port},
						Vulnerabilities: detectedVulns,
					}
					generateReport(report)
				}
			}(host, port)
		}
	}
	wg.Wait()

	// 6. Authentication Check (example for SSH)
	for _, host := range activeHosts {
		if checkSSHAuth(host, 22, "user", "password") {
			fmt.Printf("SSH authentication succeeded on %s\n", host)
		} else {
			fmt.Printf("SSH authentication failed on %s\n", host)
		}
	}
}
